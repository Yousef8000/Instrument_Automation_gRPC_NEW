# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import instrument_pb2 as instrument__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in instrument_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class InstrumentServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeVISA = channel.unary_unary(
                '/InstrumentService/InitializeVISA',
                request_serializer=instrument__pb2.Empty.SerializeToString,
                response_deserializer=instrument__pb2.ConnectionResponse.FromString,
                _registered_method=True)
        self.ListDevices = channel.unary_unary(
                '/InstrumentService/ListDevices',
                request_serializer=instrument__pb2.Empty.SerializeToString,
                response_deserializer=instrument__pb2.DeviceListResponse.FromString,
                _registered_method=True)
        self.ConnectDevice = channel.unary_unary(
                '/InstrumentService/ConnectDevice',
                request_serializer=instrument__pb2.DeviceRequest.SerializeToString,
                response_deserializer=instrument__pb2.ConnectionResponse.FromString,
                _registered_method=True)
        self.DisconnectDevice = channel.unary_unary(
                '/InstrumentService/DisconnectDevice',
                request_serializer=instrument__pb2.Empty.SerializeToString,
                response_deserializer=instrument__pb2.ConnectionResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/InstrumentService/GetStatus',
                request_serializer=instrument__pb2.Empty.SerializeToString,
                response_deserializer=instrument__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.SetChannel = channel.unary_unary(
                '/InstrumentService/SetChannel',
                request_serializer=instrument__pb2.ChannelRequest.SerializeToString,
                response_deserializer=instrument__pb2.ChannelResponse.FromString,
                _registered_method=True)
        self.SetOutput = channel.unary_unary(
                '/InstrumentService/SetOutput',
                request_serializer=instrument__pb2.OutputRequest.SerializeToString,
                response_deserializer=instrument__pb2.OutputResponse.FromString,
                _registered_method=True)
        self.SetCurrentChannel = channel.unary_unary(
                '/InstrumentService/SetCurrentChannel',
                request_serializer=instrument__pb2.SetChannelRequest.SerializeToString,
                response_deserializer=instrument__pb2.ConnectionResponse.FromString,
                _registered_method=True)
        self.GetPlotData = channel.unary_unary(
                '/InstrumentService/GetPlotData',
                request_serializer=instrument__pb2.PlotDataRequest.SerializeToString,
                response_deserializer=instrument__pb2.PlotDataResponse.FromString,
                _registered_method=True)
        self.ClearData = channel.unary_unary(
                '/InstrumentService/ClearData',
                request_serializer=instrument__pb2.Empty.SerializeToString,
                response_deserializer=instrument__pb2.ConnectionResponse.FromString,
                _registered_method=True)


class InstrumentServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitializeVISA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconnectDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCurrentChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlotData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InstrumentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeVISA': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeVISA,
                    request_deserializer=instrument__pb2.Empty.FromString,
                    response_serializer=instrument__pb2.ConnectionResponse.SerializeToString,
            ),
            'ListDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDevices,
                    request_deserializer=instrument__pb2.Empty.FromString,
                    response_serializer=instrument__pb2.DeviceListResponse.SerializeToString,
            ),
            'ConnectDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectDevice,
                    request_deserializer=instrument__pb2.DeviceRequest.FromString,
                    response_serializer=instrument__pb2.ConnectionResponse.SerializeToString,
            ),
            'DisconnectDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconnectDevice,
                    request_deserializer=instrument__pb2.Empty.FromString,
                    response_serializer=instrument__pb2.ConnectionResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=instrument__pb2.Empty.FromString,
                    response_serializer=instrument__pb2.StatusResponse.SerializeToString,
            ),
            'SetChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChannel,
                    request_deserializer=instrument__pb2.ChannelRequest.FromString,
                    response_serializer=instrument__pb2.ChannelResponse.SerializeToString,
            ),
            'SetOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOutput,
                    request_deserializer=instrument__pb2.OutputRequest.FromString,
                    response_serializer=instrument__pb2.OutputResponse.SerializeToString,
            ),
            'SetCurrentChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCurrentChannel,
                    request_deserializer=instrument__pb2.SetChannelRequest.FromString,
                    response_serializer=instrument__pb2.ConnectionResponse.SerializeToString,
            ),
            'GetPlotData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlotData,
                    request_deserializer=instrument__pb2.PlotDataRequest.FromString,
                    response_serializer=instrument__pb2.PlotDataResponse.SerializeToString,
            ),
            'ClearData': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearData,
                    request_deserializer=instrument__pb2.Empty.FromString,
                    response_serializer=instrument__pb2.ConnectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InstrumentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('InstrumentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class InstrumentService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitializeVISA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/InitializeVISA',
            instrument__pb2.Empty.SerializeToString,
            instrument__pb2.ConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/ListDevices',
            instrument__pb2.Empty.SerializeToString,
            instrument__pb2.DeviceListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/ConnectDevice',
            instrument__pb2.DeviceRequest.SerializeToString,
            instrument__pb2.ConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisconnectDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/DisconnectDevice',
            instrument__pb2.Empty.SerializeToString,
            instrument__pb2.ConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/GetStatus',
            instrument__pb2.Empty.SerializeToString,
            instrument__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/SetChannel',
            instrument__pb2.ChannelRequest.SerializeToString,
            instrument__pb2.ChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/SetOutput',
            instrument__pb2.OutputRequest.SerializeToString,
            instrument__pb2.OutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCurrentChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/SetCurrentChannel',
            instrument__pb2.SetChannelRequest.SerializeToString,
            instrument__pb2.ConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPlotData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/GetPlotData',
            instrument__pb2.PlotDataRequest.SerializeToString,
            instrument__pb2.PlotDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/InstrumentService/ClearData',
            instrument__pb2.Empty.SerializeToString,
            instrument__pb2.ConnectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
